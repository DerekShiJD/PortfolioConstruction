import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import FormatStrFormatter as fsf
import pandas as pd
import datetime

# 随机产生组合比例，计算result(x: sd, y: return, c: sharpe) => plot, 输出两个最优组合


def portfolio_annualised_performance(weights, exp_returns, cov_matrix):
    portfolio_return = np.sum(exp_returns * weights)

    # aaa = np.dot(cov_matrix, weights)
    # bbb = np.dot(weights.T, aaa)

    portfolio_std_dev = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))

    return portfolio_std_dev, portfolio_return


def display_simulated_ef_with_random(results, weights_list, names):
    plt.style.use('fivethirtyeight')
    num_stocks = len(names)
    num_port = len(weights_list) - num_stocks

    max_sharpe_idx = np.argmax(results[2])
    sdp, rp = results[0, max_sharpe_idx], results[1, max_sharpe_idx]
    sharpe_max_weights = weights_list[max_sharpe_idx]
    data_list = {'allocation': sharpe_max_weights}
    sharpe_max_frame = pd.DataFrame(data_list, index=names)
    sharpe_max_frame.allocation = [round(i*100, 2) for i in sharpe_max_frame.allocation]
    sharpe_max_frame = sharpe_max_frame.T

    min_vol_idx = np.argmin(results[0])
    sdp_min, rp_min = results[0, min_vol_idx], results[1, min_vol_idx]
    sd_min_weights = weights_list[min_vol_idx]
    data_2_list = {'allocation': sd_min_weights}
    sd_min_frame = pd.DataFrame(data_2_list, index=names)
    sd_min_frame.allocation = [round(i * 100, 2) for i in sd_min_frame.allocation]
    sd_min_frame = sd_min_frame.T

    print("=" * 50)
    print('\033[0;35;0m' + "Maximum Sharpe Ratio Portfolio Allocation\n" + '\033[0m')
    print("Annualised Return:", round(rp, 2), '% EAR')
    print("Annualised Volatility:", round(sdp, 5))
    print("\n")
    print(sharpe_max_frame)

    print("-" * 50)
    print('\033[0;35;0m' + "Minimum Volatility Portfolio Allocation\n" + '\033[0m')
    print("Annualised Return:", round(rp_min, 2), '% EAR')
    print("Annualised Volatility:", round(sdp_min, 5))
    print("\n")
    print(sd_min_frame)
    print("=" * 50 + '\n')

    time_str = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S') + ' (CDT)'
    y_format = fsf('%1.1f')
    fig, ax = plt.subplots(figsize=(10, 7))
    # fig.text(5.0, 5.0, time_str, size=10, color='r')
    hb = ax.scatter(results[0, :], results[1, :], c=results[2, :], cmap='YlGnBu', marker='o', s=10, alpha=0.3)
    cbar = fig.colorbar(hb)
    cbar.ax.tick_params(labelsize=10)
    ax.scatter(sdp, rp, marker='x', color='r', s=150, label='Maximum Sharpe ratio')
    ax.scatter(sdp_min, rp_min, marker='x', color='limegreen', s=150, label='Minimum volatility')
    for i in range(num_stocks):
        ax.scatter(results[0, num_port+i], results[1, num_port+i], marker='o', s=200, color='dodgerblue')
        ax.annotate(names[i], (results[0, num_port+i], results[1, num_port+i]), xytext=(10,0), textcoords='offset points', fontsize=10)
    ax.annotate(time_str, (max(results[0, :num_port]), min(results[1, :])), xytext=(10,0), textcoords='offset points', fontsize=10, color='grey')
    ax.set_title('Portfolio Optimization based on Efficient Frontier\n', fontdict={'weight':'normal', 'size': 15})
    ax.set_xlabel('Annualised volatility', fontsize=13)
    ax.set_ylabel('Annualised returns', fontsize=13)
    ax.yaxis.set_major_formatter(y_format)
    ax.tick_params(labelsize=10)
    ax.legend(labelspacing=0.8, fontsize=10)

    plt.show()

    return sharpe_max_weights, sd_min_weights


def port_cons(rf, rm, cov_matrix, beta_list, stock_names):
    np.random.seed(777)
    cov_matrix = cov_matrix[1:, 1:]
    num_stocks = len(beta_list)
    num_portfolios = 50000
    results = np.zeros((3, num_portfolios + num_stocks))
    weights_record = []

    exp_returns = np.array(beta_list) * (rm - rf) + rf

    for i in range(num_portfolios):
        weights = np.random.random(num_stocks)
        weights /= np.sum(weights)
        weights_record.append(weights)
        portfolio_std_dev, portfolio_return = portfolio_annualised_performance(weights, exp_returns, cov_matrix)
        results[0, i] = portfolio_std_dev
        results[1, i] = portfolio_return
        results[2, i] = (portfolio_return - rf) / portfolio_std_dev

    for i in range(num_stocks):
        weights = np.zeros((num_stocks))
        weights[i] = 1
        weights_record.append(weights)
        portfolio_std_dev, portfolio_return = portfolio_annualised_performance(weights, exp_returns, cov_matrix)
        results[0, num_portfolios + i] = portfolio_std_dev
        results[1, num_portfolios + i] = portfolio_return
        results[2, num_portfolios + i] = (portfolio_return - rf) / portfolio_std_dev

    sharpe_max_weights, sd_min_weights = display_simulated_ef_with_random(results, weights_record, stock_names)

    return sharpe_max_weights, sd_min_weights


if __name__ == '__main__':
    # SP500data = [[[2271.31, -0.0014639679245946292], [2294.69, 0.010293619100871352], [2297.42, 0.0011897031843081279], [2316.1, 0.008130859834074673], [2351.16, 0.01513751565131037], [2367.34, 0.006881709454056845], [2383.12, 0.006665709192595801], [2372.6, -0.004414381147403396], [2378.25, 0.0023813537890921737], [2343.98, -0.01440975507200672], [2362.72, 0.00799494876236136], [2355.54, -0.0030388704543914797], [2328.95, -0.011288282092428974], [2348.69, 0.008475922626076231], [2384.2, 0.015119066373169624], [2399.29, 0.006329167016189978], [2390.9, -0.0034968678233977023], [2381.73, -0.0038353757999080146], [2415.82, 0.014313125333266216], [2439.07, 0.009624061395302629], [2431.77, -0.002992944031946677], [2433.15, 0.0005674878791991467], [2438.3, 0.0021165978258636297], [2423.41, -0.006106713693967242], [2425.18, 0.000730375792787841], [2459.27, 0.01405668857569341], [2472.54, 0.005395910168464618], [2472.1, -0.00017795465391866444], [2476.83, 0.0019133530196998579], [2441.32, -0.01433687414961857], [2425.55, -0.006459620205462611], [2443.05, 0.007214858485704273], [2476.55, 0.013712367737049999], [2461.43, -0.006105267408289897], [2500.23, 0.015763194565760627], [2502.22, 0.0007959267747366369], [2519.36, 0.0068499172734612975], [2549.33, 0.011895878318302982], [2553.17, 0.0015062781201335823], [2575.21, 0.008632405989417063], [2581.07, 0.0022755425771102656], [2587.84, 0.002622943197976026], [2582.3, -0.0021407815011747107], [2578.85, -0.001336018278279159], [2602.42, 0.0091397328266476], [2642.22, 0.01529345762790008], [2651.5, 0.003512198075860527], [2675.81, 0.009168395247972826], [2683.34, 0.002814101150679682], [2673.61, -0.003626077947632435], [2743.15, 0.02600977704302421], [2786.24, 0.01570821865373738]]]
    # all_data = [[[178.49, 0.0, 0.006201025987936314], [177.48, 0.0, -0.005658580312622664], [175.04, 0.0, -0.013748027946810897], [179.0, 0.0, 0.02262340036563076], [182.95, 0.0, 0.022067039106145186], [187.41, 1.175, 0.030800765236403495], [189.31, 0.0, 0.010138199669174567], [191.21, 0.0, 0.010036448153821804], [192.36, 0.0, 0.006014329794466846], [191.51, 0.0, -0.004418798086920476], [191.33, 0.0, -0.0009398986998066859], [189.99, 0.0, -0.00700360633460515], [188.65, 0.0, -0.0070530027896205235], [191.5, 0.0, 0.015107341637953853], [195.83, 0.0, 0.02261096605744132], [199.4, 0.0, 0.018230097533575004], [196.57, 0.0, -0.01419257773319966], [195.8, 0.0, -0.003917179630665828], [200.67, 1.175, 0.030873340143002997], [206.7, 0.0, 0.030049334728658998], [206.93, 0.0, 0.0011127237542332762], [213.24, 0.0, 0.030493403566423438], [212.9, 0.0, -0.0015944475708122463], [208.19, 0.0, -0.02212306247064353], [209.59, 0.0, 0.006724626543061654], [211.77, 0.0, 0.010401259602080284], [211.16, 0.0, -0.002880483543467033], [199.72, 0.0, -0.05417692744838037], [207.65, 0.0, 0.039705587822952165], [205.98, 0.0, -0.008042379003130344], [203.53, 0.0, -0.011894358675599518], [202.13, 0.0, -0.0068785928364369165], [203.56, 1.175, 0.012887745510315234], [205.69, 0.0, 0.010463745333071308], [213.35, 0.0, 0.037240507559920255], [210.76, 0.0, -0.012139676587766598], [209.9, 0.0, -0.004080470677547852], [216.52, 0.0, 0.03153882801333971], [217.72, 0.0, 0.0055422131904673405], [221.32, 0.0, 0.016534999081388915], [234.74, 0.0, 0.060636182902584566], [232.22, 0.0, -0.010735281588140112], [227.45, 0.0, -0.020540866419774397], [229.36, 0.0, 0.008397449989008684], [231.38, 0.0, 0.008807115451691584], [241.15, 1.175, 0.04730313769556583], [238.13, 0.0, -0.012523325730872942], [238.0, 0.0, -0.000545920295636818], [234.73, 0.0, -0.013739495798319372], [235.37, 0.0, 0.002726536872151045], [240.57, 0.0, 0.022092875047797035], [244.47, 0.0, 0.0162114976929792]], [[110.71, 0.0, 0.020086611996682876], [113.99, 0.0, 0.02962695330141813], [115.17, 0.0, 0.010351785244319737], [116.85, 0.0, 0.01458713206564203], [119.67, 0.0, 0.02413350449293973], [119.31, 0.0, -0.0030082727500626676], [120.04, 0.0, 0.0061185147933953896], [121.09, 0.0, 0.008747084305231566], [127.01, 0.0, 0.0488892559253448], [127.7, 0.0, 0.005432643098968567], [130.13, 0.0, 0.019028974158183182], [130.22, 0.0, 0.0006916160762314871], [129.05, 0.0, -0.008984794962371275], [131.52, 0.0, 0.019139868268113123], [133.74, 0.0, 0.01687956204379561], [134.84, 0.0, 0.008224914012262555], [136.84, 0.0, 0.014832393948383269], [136.43, 0.0, -0.002996199941537537], [141.89, 0.0, 0.040020523345305134], [143.48, 0.0, 0.011205863697230273], [138.05, 0.0, -0.037844995818232356], [137.84, 0.0, -0.0015211879753712998], [145.41, 0.0, 0.05491874637260587], [141.44, 0.0, -0.027302111271576914], [142.22, 0.0, 0.005514705882352949], [146.16, 0.0, 0.02770355786809167], [149.52, 0.0, 0.02298850574712653], [146.73, 0.0, -0.018659711075441548], [147.71, 0.0, 0.0066789340966402115], [146.47, 0.0, -0.008394827702931481], [147.97, 0.0, 0.010241004983955759], [151.45, 0.0, 0.02351828073258086], [155.06, 0.0, 0.023836249587322642], [155.34, 0.0, 0.001805752611892178], [154.49, 0.0, -0.005471868160164763], [148.5, 0.0, -0.038772736099423964], [149.18, 0.0, 0.004579124579124625], [151.12, 0.0, 0.013004424185547645], [153.93, 0.0, 0.018594494441503455], [175.64, 0.0, 0.14103813421685168], [177.33, 0.0, 0.00962195399681181], [182.3, 0.0, 0.028026842609823483], [181.72, 0.0, -0.003181568842567265], [182.24, 0.0, 0.0028615452344266466], [184.46, 0.0, 0.01218173836698858], [179.52, 0.0, -0.026780873902201005], [173.57, 0.0, -0.03314393939393949], [177.51, 0.0, 0.022699775306792635], [175.0, 0.0, -0.014140048447974712], [175.24, 0.0, 0.0013714285714286234], [185.34, 0.0, 0.05763524309518371], [195.05, 0.0, 0.052390201791302514]], [[172.29, 0.0, -0.006114796654167882], [175.28, 0.0, 0.01735446050264095], [179.37, 0.0, 0.023334094020994997], [178.03, 0.0, -0.007470591514746074], [180.9, 0.0, 0.01612087850362301], [183.42, 0.0, 0.013930348258706367], [184.69, 0.0, 0.006923999563842604], [185.31, 0.0, 0.0033569765553089206], [183.79, 0.73, -0.004263126652636234], [183.87, 0.0, 0.00043527939496170907], [183.44, 0.0, -0.002338608799695474], [184.11, 0.0, 0.0036524204099433926], [182.59, 0.0, -0.008255933952528435], [185.29, 0.0, 0.014787228216222074], [186.97, 0.0, 0.00906686815262565], [185.4, 0.0, -0.00839706904851042], [184.62, 0.0, -0.00420711974110033], [184.13, 0.0, -0.002654100314158862], [186.48, 0.0, 0.012762721989898411], [193.06, 0.0, 0.03528528528528536], [192.0, 0.0, -0.00549052108152907], [191.29, 0.73, 0.00010416666666657193], [195.15, 0.0, 0.02017878613623302], [195.11, 0.0, -0.00020497053548548317], [197.79, 0.0, 0.013735841320280755], [200.62, 0.0, 0.014308104555336532], [205.3, 0.0, 0.023327684179044995], [201.98, 0.0, -0.016171456405260697], [197.05, 0.0, -0.02440835726309525], [200.36, 0.0, 0.016797767064196913], [197.69, 0.0, -0.013326013176282769], [198.57, 0.0, 0.004451413829733398], [199.15, 0.0, 0.002920884322908861], [203.7, 0.0, 0.02284710017574684], [195.34, 0.73, -0.0374570446735395], [193.06, 0.0, -0.011671956588512344], [195.95, 0.0, 0.014969439552470664], [198.08, 0.0, 0.010870119928553326], [201.43, 0.0, 0.016912358642972507], [211.83, 0.0, 0.05163083949759224], [210.1, 0.0, -0.00816692630883264], [224.41, 0.0, 0.06811042360780582], [219.23, 0.0, -0.023082750323069414], [220.31, 0.0, 0.004926333074852952], [226.28, 0.0, 0.027098179837501696], [226.33, 0.0, 0.00022096517588833024], [219.68, 0.0, -0.029381876021738192], [221.46, 0.75, 0.011516751638747274], [217.23, 0.0, -0.019100514765646247], [214.06, 0.0, -0.014592827878285631], [222.08, 0.0, 0.037466130991310895], [227.71, 0.0, 0.02535122478386165]], [[115.6, 0.0, -0.006702182505585162], [113.79, 0.0, -0.01565743944636668], [113.57, 0.0, -0.0019333860620442311], [113.05, 0.0, -0.004578673945584187], [110.33, 0.0, -0.02406015037593984], [110.12, 1.08, 0.007885434605275125], [113.55, 0.0, 0.031147838721394774], [110.61, 0.0, -0.025891677675033007], [107.68, 0.0, -0.0264894674984178], [107.99, 0.0, 0.0028789004457651195], [107.37, 0.0, -0.005741272340031395], [108.86, 0.0, 0.013877246903231766], [106.1, 0.0, -0.025353665258129755], [104.89, 0.0, -0.011404335532516435], [106.7, 0.0, 0.017256173133759198], [105.79, 0.0, -0.008528584817244578], [105.96, 0.0, 0.0016069571793173975], [106.52, 0.0, 0.0052850132125330535], [104.72, 1.08, -0.006759294029290264], [103.11, 0.0, -0.015374331550802135], [106.4, 0.0, 0.03190767141887311], [108.35, 0.0, 0.018327067669172824], [105.0, 0.0, -0.03091832025842173], [104.33, 0.0, -0.006380952380952397], [103.49, 0.0, -0.00805137544330493], [104.44, 0.0, 0.00917963088221087], [103.25, 0.0, -0.011394101876675581], [108.12, 0.0, 0.04716707021791772], [110.11, 0.0, 0.018405475397706206], [109.23, 0.0, -0.00799200799200795], [106.48, 0.0, -0.025176233635448134], [108.23, 1.08, 0.026577761081893296], [108.76, 0.0, 0.004896978656564734], [110.78, 0.0, 0.01857300478116951], [114.63, 0.0, 0.03475356562556413], [117.29, 0.0, 0.023205094652359863], [117.5, 0.0, 0.001790433967090065], [117.03, 0.0, -0.0039999999999999905], [119.16, 0.0, 0.01820046142014864], [118.64, 0.0, -0.0043638804968109774], [113.54, 0.0, -0.04298718813216448], [114.99, 0.0, 0.012770829663554594], [117.18, 0.0, 0.01904513435950963], [114.71, 0.0, -0.02107868236900506], [116.51, 1.08, 0.025106791038270508], [119.51, 0.0, 0.025748862758561496], [119.92, 0.0, 0.0034306752573006155], [119.73, 0.0, -0.0015843895930620223], [124.98, 0.0, 0.043848659483838634], [125.19, 0.0, 0.0016802688430148324], [127.9, 0.0, 0.021647096413451618], [133.6, 0.0, 0.04456606724003118]]]
    rf = 2
    rm = 8
    beta_list = [1.2053291601444025, 1.3501080147885933, 0.6364557608544632, 0.5327826823786834]
    stock_names = ['MMM', 'ADBE', 'BDX', 'CVX']

    cov_matrix = np.array([[6.831714888861504e-05, 8.234465169337449e-05, 9.223553026202481e-05, 4.3480842975311134e-05, 3.6398193837340214e-05],
[8.234465169337449e-05, 0.0004013625413349514, 0.00012131325562796009, 3.3215182860379473e-05, -6.304617058204547e-05],
[9.223553026202481e-05, 0.00012131325562796009, 0.000794752151413201, 0.00032515642612855535, -0.0001422492059633648],
[4.3480842975311134e-05, 3.3215182860379473e-05, 0.00032515642612855535, 0.0003793438009549541, -4.6101546687616e-05],
[3.6398193837340214e-05, -6.304617058204547e-05, -0.0001422492059633648, -4.6101546687616e-05, 0.00042928120204224095]])
    # cov_matrix = cov_matrix[1:, 1:]
    weights = np.array([0.308044235, 0.048772746, 0.281195863, 0.361988155])
    exp_returns = np.array([11.64264228, 12.80086643, 7.091636851, 6.262261091]) / 100

    # portfolio_std_dev, portfolio_return = portfolio_annualised_performance(weights, exp_returns, cov_matrix)

    sharpe_max_weights, sd_min_weights = port_cons(rf, rm, cov_matrix, beta_list, stock_names)

    a = 1


